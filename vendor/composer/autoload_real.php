<?php

// autoload_real.php @generated by Composer
//这是一个引导文件，是为了引导composer真正的【自动加载器】的大门
//这里完成了自动加载器的实例与初始化（类仓库绑定）
//另外还有单独地一个方法，把各个php包涉及的助手函数【直接包含】进来，没错，就是不问青红皂白直接包含

class ComposerAutoloaderInitcfd7f7bd0ce7e17d0a74a568adc0555f
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        //我们看到，该加载器就为了加载【Composer\Autoload\ClassLoader】这一个类而已,专门方法做专门事
        //所以这个加载器实则是打开【自动加载】的大门，因为真正实现【自动加载】这个强大功能的类就是【Composer\Autoload\ClassLoader】
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }


    /**
     * 就是实例化【自动加载器】和初始化的过程
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }
        //首先注册一个加载器A，该加载起器专门用来加载一个类B，把B加载进来后，A就没用了。也就是说A只做了一件事
        spl_autoload_register(array('ComposerAutoloaderInitcfd7f7bd0ce7e17d0a74a568adc0555f', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInitcfd7f7bd0ce7e17d0a74a568adc0555f', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            //autoload_static.php是一个已经完成了静态映射的仓库而已，因为它有好多静态数组
            require_once __DIR__ . '/autoload_static.php';
             //getInitializer()方法是把这个类库交给$loader管理
            call_user_func(\Composer\Autoload\ComposerStaticInitcfd7f7bd0ce7e17d0a74a568adc0555f::getInitializer($loader));
        } else {
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }
        //注册$loader的成员方法为【自动加载】函数，队列之首
        //至此，composer的【自动加载器】的准备工作已经完成了
        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInitcfd7f7bd0ce7e17d0a74a568adc0555f::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
        foreach ($includeFiles as $fileIdentifier => $file) {
            //这些文件都是一开始就加载，无论后续是否需要
            composerRequirecfd7f7bd0ce7e17d0a74a568adc0555f($fileIdentifier, $file);
        }

        return $loader;
    }
}

function composerRequirecfd7f7bd0ce7e17d0a74a568adc0555f($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
